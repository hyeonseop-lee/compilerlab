// Generated by Bisonc++ V4.05.00 on Mon, 11 May 2015 09:04:16 +0900

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {293, 0}, // 1: Program ->  <empty>
     {293, 1}, // 2: Program ->  FuncList
     {293, 1}, // 3: Program ->  DeclList
     {293, 2}, // 4: Program ->  DeclList FuncList
     {295, 1}, // 5: DeclList ->  Declaration
     {295, 2}, // 6: DeclList ->  DeclList Declaration
     {294, 1}, // 7: FuncList ->  Function
     {294, 2}, // 8: FuncList ->  FuncList Function
     {296, 3}, // 9: Declaration (SEMICOLON) ->  Type IdentList SEMICOLON
     {299, 1}, // 10: IdentList ->  identifier
     {299, 3}, // 11: IdentList (COMA) ->  IdentList COMA identifier
     {300, 1}, // 12: identifier ->  Symbol
     {300, 4}, // 13: identifier (LBRACKET) ->  Symbol LBRACKET IntNum RBRACKET
     {297, 5}, // 14: Function (LPAREN) ->  Type Symbol LPAREN RPAREN CompoundStmt
     {297, 6}, // 15: Function (LPAREN) ->  Type Symbol LPAREN ParamList RPAREN CompoundStmt
     {304, 2}, // 16: ParamList ->  Type identifier
     {304, 4}, // 17: ParamList (COMA) ->  ParamList COMA Type identifier
     {301, 1}, // 18: Symbol (ID) ->  ID
     {302, 1}, // 19: IntNum (INTNUM) ->  INTNUM
     {305, 1}, // 20: FloatNum (FLOATNUM) ->  FLOATNUM
     {298, 1}, // 21: Type (INT) ->  INT
     {298, 1}, // 22: Type (FLOAT) ->  FLOAT
     {303, 3}, // 23: CompoundStmt (LBRACE) ->  LBRACE StmtList RBRACE
     {303, 4}, // 24: CompoundStmt (LBRACE) ->  LBRACE DeclList StmtList RBRACE
     {306, 0}, // 25: StmtList ->  <empty>
     {306, 2}, // 26: StmtList ->  StmtList Stmt
     {307, 1}, // 27: Stmt ->  AssignStmt
     {307, 1}, // 28: Stmt ->  CallStmt
     {307, 1}, // 29: Stmt ->  RetStmt
     {307, 1}, // 30: Stmt ->  WhileStmt
     {307, 1}, // 31: Stmt ->  ForStmt
     {307, 1}, // 32: Stmt ->  IfStmt
     {307, 1}, // 33: Stmt ->  SwitchStmt
     {307, 1}, // 34: Stmt ->  CompoundStmt
     {307, 1}, // 35: Stmt (SEMICOLON) ->  SEMICOLON
     {308, 2}, // 36: AssignStmt (SEMICOLON) ->  Assign SEMICOLON
     {315, 3}, // 37: Assign (EQUAL) ->  Symbol EQUAL Expr
     {315, 6}, // 38: Assign (LBRACKET) ->  Symbol LBRACKET Expr RBRACKET EQUAL Expr
     {309, 2}, // 39: CallStmt (SEMICOLON) ->  Call SEMICOLON
     {317, 3}, // 40: Call (LPAREN) ->  Symbol LPAREN RPAREN
     {317, 4}, // 41: Call (LPAREN) ->  Symbol LPAREN ArgList RPAREN
     {310, 2}, // 42: RetStmt (RETURN) ->  RETURN SEMICOLON
     {310, 3}, // 43: RetStmt (RETURN) ->  RETURN Expr SEMICOLON
     {311, 5}, // 44: WhileStmt (WHILE) ->  WHILE LPAREN Expr RPAREN Stmt
     {311, 6}, // 45: WhileStmt (DO) ->  DO Stmt WHILE LPAREN Expr RPAREN
     {312, 9}, // 46: ForStmt (FOR) ->  FOR LPAREN Assign SEMICOLON Expr SEMICOLON Assign RPAREN Stmt
     {313, 5}, // 47: IfStmt (IF) ->  IF LPAREN Expr RPAREN Stmt
     {313, 7}, // 48: IfStmt (IF) ->  IF LPAREN Expr RPAREN Stmt ELSE Stmt
     {314, 7}, // 49: SwitchStmt (SWITCH) ->  SWITCH LPAREN identifier RPAREN LBRACE CaseList RBRACE
     {319, 1}, // 50: CaseList ->  CaseOnlyList
     {319, 4}, // 51: CaseList (DEFAULT) ->  CaseOnlyList DEFAULT COLON StmtList
     {319, 6}, // 52: CaseList (DEFAULT) ->  CaseOnlyList DEFAULT COLON StmtList BREAK SEMICOLON
     {320, 0}, // 53: CaseOnlyList ->  <empty>
     {320, 5}, // 54: CaseOnlyList (CASE) ->  CaseOnlyList CASE IntNum COLON StmtList
     {320, 7}, // 55: CaseOnlyList (CASE) ->  CaseOnlyList CASE IntNum COLON StmtList BREAK SEMICOLON
     {316, 2}, // 56: Expr (NEG) ->  MINUS Expr
     {316, 3}, // 57: Expr (PLUS) ->  Expr PLUS Expr
     {316, 3}, // 58: Expr (MINUS) ->  Expr MINUS Expr
     {316, 3}, // 59: Expr (MUL) ->  Expr MUL Expr
     {316, 3}, // 60: Expr (DIV) ->  Expr DIV Expr
     {316, 3}, // 61: Expr (EQ) ->  Expr EQ Expr
     {316, 3}, // 62: Expr (NE) ->  Expr NE Expr
     {316, 3}, // 63: Expr (LT) ->  Expr LT Expr
     {316, 3}, // 64: Expr (GT) ->  Expr GT Expr
     {316, 3}, // 65: Expr (LE) ->  Expr LE Expr
     {316, 3}, // 66: Expr (GE) ->  Expr GE Expr
     {316, 1}, // 67: Expr ->  Call
     {316, 1}, // 68: Expr ->  IntNum
     {316, 1}, // 69: Expr ->  FloatNum
     {316, 1}, // 70: Expr ->  Symbol
     {316, 4}, // 71: Expr (LBRACKET) ->  Symbol LBRACKET Expr RBRACKET
     {316, 3}, // 72: Expr (LPAREN) ->  LPAREN Expr RPAREN
     {318, 1}, // 73: ArgList ->  Expr
     {318, 3}, // 74: ArgList (COMA) ->  ArgList COMA Expr
     {321, 1}, // 75: Program_$ ->  Program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  9} },               
    { {     293}, {  1} }, // Program    
    { {     294}, {  2} }, // FuncList   
    { {     295}, {  3} }, // DeclList   
    { {     297}, {  4} }, // Function   
    { {     296}, {  5} }, // Declaration
    { {     298}, {  6} }, // Type       
    { {     260}, {  7} }, // INT        
    { {     261}, {  8} }, // FLOAT      
    { {       0}, { -1} },               
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, {  5} },            
    { {     297}, {  9} }, // Function
    { {     298}, { 10} }, // Type    
    { {     260}, {  7} }, // INT     
    { {     261}, {  8} }, // FLOAT   
    { {       0}, { -2} },            
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  7} },               
    { {     294}, { 11} }, // FuncList   
    { {     296}, { 12} }, // Declaration
    { {     297}, {  4} }, // Function   
    { {     298}, {  6} }, // Type       
    { {     260}, {  7} }, // INT        
    { {     261}, {  8} }, // FLOAT      
    { {       0}, { -3} },               
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       301}, { 13} }, // Symbol    
    { {       299}, { 14} }, // IdentList 
    { {       257}, { 15} }, // ID        
    { {       300}, { 16} }, // identifier
    { {         0}, {  0} },              
};

SR__ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       301}, { 17} }, // Symbol
    { {       257}, { 15} }, // ID    
    { {         0}, {  0} },          
};

SR__ s_11[] =
{
    { { REQ_DEF}, {  5} },            
    { {     297}, {  9} }, // Function
    { {     298}, { 10} }, // Type    
    { {     260}, {  7} }, // INT     
    { {     261}, {  8} }, // FLOAT   
    { {       0}, { -4} },            
};

SR__ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_13[] =
{
    { { REQ_DEF}, {   3} },            
    { {     291}, {  18} }, // LPAREN  
    { {     272}, {  19} }, // LBRACKET
    { {       0}, { -12} },            
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       277}, { 20} }, // SEMICOLON
    { {       278}, { 21} }, // COMA     
    { {         0}, {  0} },             
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       291}, { 18} }, // LPAREN
    { {         0}, {  0} },          
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  6} },             
    { {       292}, { 22} }, // RPAREN   
    { {       304}, { 23} }, // ParamList
    { {       298}, { 24} }, // Type     
    { {       260}, {  7} }, // INT      
    { {       261}, {  8} }, // FLOAT    
    { {         0}, {  0} },             
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       302}, { 25} }, // IntNum
    { {       258}, { 26} }, // INTNUM
    { {         0}, {  0} },          
};

SR__ s_20[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       300}, { 27} }, // identifier
    { {       301}, { 28} }, // Symbol    
    { {       257}, { 15} }, // ID        
    { {         0}, {  0} },              
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  3} },                
    { {       303}, { 29} }, // CompoundStmt
    { {       274}, { 30} }, // LBRACE      
    { {         0}, {  0} },                
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       292}, { 31} }, // RPAREN
    { {       278}, { 32} }, // COMA  
    { {         0}, {  0} },          
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       300}, { 33} }, // identifier
    { {       301}, { 28} }, // Symbol    
    { {       257}, { 15} }, // ID        
    { {         0}, {  0} },              
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, {  2} },            
    { {       273}, { 34} }, // RBRACKET
    { {         0}, {  0} },            
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_28[] =
{
    { { REQ_DEF}, {   2} },            
    { {     272}, {  19} }, // LBRACKET
    { {       0}, { -12} },            
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_30[] =
{
    { { REQ_DEF}, {   7} },               
    { {     306}, {  35} }, // StmtList   
    { {     295}, {  36} }, // DeclList   
    { {     296}, {   5} }, // Declaration
    { {     298}, {  37} }, // Type       
    { {     260}, {   7} }, // INT        
    { {     261}, {   8} }, // FLOAT      
    { {       0}, { -25} },               
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  3} },                
    { {       303}, { 38} }, // CompoundStmt
    { {       274}, { 30} }, // LBRACE      
    { {         0}, {  0} },                
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  4} },         
    { {       298}, { 39} }, // Type 
    { {       260}, {  7} }, // INT  
    { {       261}, {  8} }, // FLOAT
    { {         0}, {  0} },         
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, { 23} },                
    { {       275}, { 40} }, // RBRACE      
    { {       307}, { 41} }, // Stmt        
    { {       308}, { 42} }, // AssignStmt  
    { {       309}, { 43} }, // CallStmt    
    { {       310}, { 44} }, // RetStmt     
    { {       311}, { 45} }, // WhileStmt   
    { {       312}, { 46} }, // ForStmt     
    { {       313}, { 47} }, // IfStmt      
    { {       314}, { 48} }, // SwitchStmt  
    { {       303}, { 49} }, // CompoundStmt
    { {       277}, { 50} }, // SEMICOLON   
    { {       315}, { 51} }, // Assign      
    { {       317}, { 52} }, // Call        
    { {       262}, { 53} }, // RETURN      
    { {       263}, { 54} }, // WHILE       
    { {       264}, { 55} }, // DO          
    { {       265}, { 56} }, // FOR         
    { {       266}, { 57} }, // IF          
    { {       268}, { 58} }, // SWITCH      
    { {       274}, { 30} }, // LBRACE      
    { {       301}, { 59} }, // Symbol      
    { {       257}, { 15} }, // ID          
    { {         0}, {  0} },                
};

SR__ s_36[] =
{
    { { REQ_DEF}, {   6} },               
    { {     306}, {  60} }, // StmtList   
    { {     296}, {  12} }, // Declaration
    { {     298}, {  37} }, // Type       
    { {     260}, {   7} }, // INT        
    { {     261}, {   8} }, // FLOAT      
    { {       0}, { -25} },               
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       299}, { 14} }, // IdentList 
    { {       300}, { 16} }, // identifier
    { {       301}, { 28} }, // Symbol    
    { {       257}, { 15} }, // ID        
    { {         0}, {  0} },              
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       300}, { 61} }, // identifier
    { {       301}, { 28} }, // Symbol    
    { {       257}, { 15} }, // ID        
    { {         0}, {  0} },              
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       277}, { 62} }, // SEMICOLON
    { {         0}, {  0} },             
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       277}, { 63} }, // SEMICOLON
    { {         0}, {  0} },             
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 12} },             
    { {       277}, { 64} }, // SEMICOLON
    { {       316}, { 65} }, // Expr     
    { {       287}, { 66} }, // MINUS    
    { {       317}, { 67} }, // Call     
    { {       302}, { 68} }, // IntNum   
    { {       305}, { 69} }, // FloatNum 
    { {       301}, { 70} }, // Symbol   
    { {       291}, { 71} }, // LPAREN   
    { {       258}, { 26} }, // INTNUM   
    { {       259}, { 72} }, // FLOATNUM 
    { {       257}, { 15} }, // ID       
    { {         0}, {  0} },             
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       291}, { 73} }, // LPAREN
    { {         0}, {  0} },          
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, { 22} },                
    { {       307}, { 74} }, // Stmt        
    { {       308}, { 42} }, // AssignStmt  
    { {       309}, { 43} }, // CallStmt    
    { {       310}, { 44} }, // RetStmt     
    { {       311}, { 45} }, // WhileStmt   
    { {       312}, { 46} }, // ForStmt     
    { {       313}, { 47} }, // IfStmt      
    { {       314}, { 48} }, // SwitchStmt  
    { {       303}, { 49} }, // CompoundStmt
    { {       277}, { 50} }, // SEMICOLON   
    { {       315}, { 51} }, // Assign      
    { {       317}, { 52} }, // Call        
    { {       262}, { 53} }, // RETURN      
    { {       263}, { 54} }, // WHILE       
    { {       264}, { 55} }, // DO          
    { {       265}, { 56} }, // FOR         
    { {       266}, { 57} }, // IF          
    { {       268}, { 58} }, // SWITCH      
    { {       274}, { 30} }, // LBRACE      
    { {       301}, { 59} }, // Symbol      
    { {       257}, { 15} }, // ID          
    { {         0}, {  0} },                
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       291}, { 75} }, // LPAREN
    { {         0}, {  0} },          
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       291}, { 76} }, // LPAREN
    { {         0}, {  0} },          
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       291}, { 77} }, // LPAREN
    { {         0}, {  0} },          
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  4} },            
    { {       279}, { 78} }, // EQUAL   
    { {       272}, { 79} }, // LBRACKET
    { {       291}, { 80} }, // LPAREN  
    { {         0}, {  0} },            
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, { 23} },                
    { {       275}, { 81} }, // RBRACE      
    { {       307}, { 41} }, // Stmt        
    { {       308}, { 42} }, // AssignStmt  
    { {       309}, { 43} }, // CallStmt    
    { {       310}, { 44} }, // RetStmt     
    { {       311}, { 45} }, // WhileStmt   
    { {       312}, { 46} }, // ForStmt     
    { {       313}, { 47} }, // IfStmt      
    { {       314}, { 48} }, // SwitchStmt  
    { {       303}, { 49} }, // CompoundStmt
    { {       277}, { 50} }, // SEMICOLON   
    { {       315}, { 51} }, // Assign      
    { {       317}, { 52} }, // Call        
    { {       262}, { 53} }, // RETURN      
    { {       263}, { 54} }, // WHILE       
    { {       264}, { 55} }, // DO          
    { {       265}, { 56} }, // FOR         
    { {       266}, { 57} }, // IF          
    { {       268}, { 58} }, // SWITCH      
    { {       274}, { 30} }, // LBRACE      
    { {       301}, { 59} }, // Symbol      
    { {       257}, { 15} }, // ID          
    { {         0}, {  0} },                
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, { 12} },             
    { {       277}, { 82} }, // SEMICOLON
    { {       286}, { 83} }, // PLUS     
    { {       287}, { 84} }, // MINUS    
    { {       288}, { 85} }, // MUL      
    { {       289}, { 86} }, // DIV      
    { {       280}, { 87} }, // EQ       
    { {       281}, { 88} }, // NE       
    { {       282}, { 89} }, // LT       
    { {       283}, { 90} }, // GT       
    { {       284}, { 91} }, // LE       
    { {       285}, { 92} }, // GE       
    { {         0}, {  0} },             
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, { 11} },            
    { {       316}, { 93} }, // Expr    
    { {       287}, { 66} }, // MINUS   
    { {       317}, { 67} }, // Call    
    { {       302}, { 68} }, // IntNum  
    { {       305}, { 69} }, // FloatNum
    { {       301}, { 70} }, // Symbol  
    { {       291}, { 71} }, // LPAREN  
    { {       258}, { 26} }, // INTNUM  
    { {       259}, { 72} }, // FLOATNUM
    { {       257}, { 15} }, // ID      
    { {         0}, {  0} },            
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_70[] =
{
    { { REQ_DEF}, {   3} },            
    { {     272}, {  94} }, // LBRACKET
    { {     291}, {  80} }, // LPAREN  
    { {       0}, { -70} },            
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, { 11} },            
    { {       316}, { 95} }, // Expr    
    { {       287}, { 66} }, // MINUS   
    { {       317}, { 67} }, // Call    
    { {       302}, { 68} }, // IntNum  
    { {       305}, { 69} }, // FloatNum
    { {       301}, { 70} }, // Symbol  
    { {       291}, { 71} }, // LPAREN  
    { {       258}, { 26} }, // INTNUM  
    { {       259}, { 72} }, // FLOATNUM
    { {       257}, { 15} }, // ID      
    { {         0}, {  0} },            
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, { 11} },            
    { {       316}, { 96} }, // Expr    
    { {       287}, { 66} }, // MINUS   
    { {       317}, { 67} }, // Call    
    { {       302}, { 68} }, // IntNum  
    { {       305}, { 69} }, // FloatNum
    { {       301}, { 70} }, // Symbol  
    { {       291}, { 71} }, // LPAREN  
    { {       258}, { 26} }, // INTNUM  
    { {       259}, { 72} }, // FLOATNUM
    { {       257}, { 15} }, // ID      
    { {         0}, {  0} },            
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       263}, { 97} }, // WHILE
    { {         0}, {  0} },         
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  4} },          
    { {       315}, { 98} }, // Assign
    { {       301}, { 99} }, // Symbol
    { {       257}, { 15} }, // ID    
    { {         0}, {  0} },          
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 100} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       300}, { 101} }, // identifier
    { {       301}, {  28} }, // Symbol    
    { {       257}, {  15} }, // ID        
    { {         0}, {   0} },              
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 102} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 103} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  13} },            
    { {       292}, { 104} }, // RPAREN  
    { {       318}, { 105} }, // ArgList 
    { {       316}, { 106} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 107} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 108} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 109} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 110} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 111} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 112} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 113} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 114} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 115} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 116} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_93[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 117} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {  12} },          
    { {       292}, { 118} }, // RPAREN
    { {       286}, {  83} }, // PLUS  
    { {       287}, {  84} }, // MINUS 
    { {       288}, {  85} }, // MUL   
    { {       289}, {  86} }, // DIV   
    { {       280}, {  87} }, // EQ    
    { {       281}, {  88} }, // NE    
    { {       282}, {  89} }, // LT    
    { {       283}, {  90} }, // GT    
    { {       284}, {  91} }, // LE    
    { {       285}, {  92} }, // GE    
    { {         0}, {   0} },          
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  12} },          
    { {       292}, { 119} }, // RPAREN
    { {       286}, {  83} }, // PLUS  
    { {       287}, {  84} }, // MINUS 
    { {       288}, {  85} }, // MUL   
    { {       289}, {  86} }, // DIV   
    { {       280}, {  87} }, // EQ    
    { {       281}, {  88} }, // NE    
    { {       282}, {  89} }, // LT    
    { {       283}, {  90} }, // GT    
    { {       284}, {  91} }, // LE    
    { {       285}, {  92} }, // GE    
    { {         0}, {   0} },          
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       291}, { 120} }, // LPAREN
    { {         0}, {   0} },          
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {   2} },             
    { {       277}, { 121} }, // SEMICOLON
    { {         0}, {   0} },             
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       279}, { 78} }, // EQUAL   
    { {       272}, { 79} }, // LBRACKET
    { {         0}, {  0} },            
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  12} },          
    { {       292}, { 122} }, // RPAREN
    { {       286}, {  83} }, // PLUS  
    { {       287}, {  84} }, // MINUS 
    { {       288}, {  85} }, // MUL   
    { {       289}, {  86} }, // DIV   
    { {       280}, {  87} }, // EQ    
    { {       281}, {  88} }, // NE    
    { {       282}, {  89} }, // LT    
    { {       283}, {  90} }, // GT    
    { {       284}, {  91} }, // LE    
    { {       285}, {  92} }, // GE    
    { {         0}, {   0} },          
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       292}, { 123} }, // RPAREN
    { {         0}, {   0} },          
};

SR__ s_102[] =
{
    { { REQ_DEF}, {  11} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {     280}, {  87} }, // EQ   
    { {     281}, {  88} }, // NE   
    { {     282}, {  89} }, // LT   
    { {     283}, {  90} }, // GT   
    { {     284}, {  91} }, // LE   
    { {     285}, {  92} }, // GE   
    { {       0}, { -37} },         
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  12} },            
    { {       273}, { 124} }, // RBRACKET
    { {       286}, {  83} }, // PLUS    
    { {       287}, {  84} }, // MINUS   
    { {       288}, {  85} }, // MUL     
    { {       289}, {  86} }, // DIV     
    { {       280}, {  87} }, // EQ      
    { {       281}, {  88} }, // NE      
    { {       282}, {  89} }, // LT      
    { {       283}, {  90} }, // GT      
    { {       284}, {  91} }, // LE      
    { {       285}, {  92} }, // GE      
    { {         0}, {   0} },            
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       292}, { 125} }, // RPAREN
    { {       278}, { 126} }, // COMA  
    { {         0}, {   0} },          
};

SR__ s_106[] =
{
    { { REQ_DEF}, {  11} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {     280}, {  87} }, // EQ   
    { {     281}, {  88} }, // NE   
    { {     282}, {  89} }, // LT   
    { {     283}, {  90} }, // GT   
    { {     284}, {  91} }, // LE   
    { {     285}, {  92} }, // GE   
    { {       0}, { -73} },         
};

SR__ s_107[] =
{
    { { REQ_DEF}, {   3} },       
    { {     288}, {  85} }, // MUL
    { {     289}, {  86} }, // DIV
    { {       0}, { -57} },       
};

SR__ s_108[] =
{
    { { REQ_DEF}, {   3} },       
    { {     288}, {  85} }, // MUL
    { {     289}, {  86} }, // DIV
    { {       0}, { -58} },       
};

SR__ s_109[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   9} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {     282}, {  89} }, // LT   
    { {     283}, {  90} }, // GT   
    { {     284}, {  91} }, // LE   
    { {     285}, {  92} }, // GE   
    { {       0}, { -61} },         
};

SR__ s_112[] =
{
    { { REQ_DEF}, {   9} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {     282}, {  89} }, // LT   
    { {     283}, {  90} }, // GT   
    { {     284}, {  91} }, // LE   
    { {     285}, {  92} }, // GE   
    { {       0}, { -62} },         
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   5} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {       0}, { -63} },         
};

SR__ s_114[] =
{
    { { REQ_DEF}, {   5} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {       0}, { -64} },         
};

SR__ s_115[] =
{
    { { REQ_DEF}, {   5} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {       0}, { -65} },         
};

SR__ s_116[] =
{
    { { REQ_DEF}, {   5} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {       0}, { -66} },         
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {  12} },            
    { {       273}, { 127} }, // RBRACKET
    { {       286}, {  83} }, // PLUS    
    { {       287}, {  84} }, // MINUS   
    { {       288}, {  85} }, // MUL     
    { {       289}, {  86} }, // DIV     
    { {       280}, {  87} }, // EQ      
    { {       281}, {  88} }, // NE      
    { {       282}, {  89} }, // LT      
    { {       283}, {  90} }, // GT      
    { {       284}, {  91} }, // LE      
    { {       285}, {  92} }, // GE      
    { {         0}, {   0} },            
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {  22} },                
    { {       307}, { 128} }, // Stmt        
    { {       308}, {  42} }, // AssignStmt  
    { {       309}, {  43} }, // CallStmt    
    { {       310}, {  44} }, // RetStmt     
    { {       311}, {  45} }, // WhileStmt   
    { {       312}, {  46} }, // ForStmt     
    { {       313}, {  47} }, // IfStmt      
    { {       314}, {  48} }, // SwitchStmt  
    { {       303}, {  49} }, // CompoundStmt
    { {       277}, {  50} }, // SEMICOLON   
    { {       315}, {  51} }, // Assign      
    { {       317}, {  52} }, // Call        
    { {       262}, {  53} }, // RETURN      
    { {       263}, {  54} }, // WHILE       
    { {       264}, {  55} }, // DO          
    { {       265}, {  56} }, // FOR         
    { {       266}, {  57} }, // IF          
    { {       268}, {  58} }, // SWITCH      
    { {       274}, {  30} }, // LBRACE      
    { {       301}, {  59} }, // Symbol      
    { {       257}, {  15} }, // ID          
    { {         0}, {   0} },                
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 129} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 130} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {  22} },                
    { {       307}, { 131} }, // Stmt        
    { {       308}, {  42} }, // AssignStmt  
    { {       309}, {  43} }, // CallStmt    
    { {       310}, {  44} }, // RetStmt     
    { {       311}, {  45} }, // WhileStmt   
    { {       312}, {  46} }, // ForStmt     
    { {       313}, {  47} }, // IfStmt      
    { {       314}, {  48} }, // SwitchStmt  
    { {       303}, {  49} }, // CompoundStmt
    { {       277}, {  50} }, // SEMICOLON   
    { {       315}, {  51} }, // Assign      
    { {       317}, {  52} }, // Call        
    { {       262}, {  53} }, // RETURN      
    { {       263}, {  54} }, // WHILE       
    { {       264}, {  55} }, // DO          
    { {       265}, {  56} }, // FOR         
    { {       266}, {  57} }, // IF          
    { {       268}, {  58} }, // SWITCH      
    { {       274}, {  30} }, // LBRACE      
    { {       301}, {  59} }, // Symbol      
    { {       257}, {  15} }, // ID          
    { {         0}, {   0} },                
};

SR__ s_123[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       274}, { 132} }, // LBRACE
    { {         0}, {   0} },          
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       279}, { 133} }, // EQUAL
    { {         0}, {   0} },         
};

SR__ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 134} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_127[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_128[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {  12} },          
    { {       292}, { 135} }, // RPAREN
    { {       286}, {  83} }, // PLUS  
    { {       287}, {  84} }, // MINUS 
    { {       288}, {  85} }, // MUL   
    { {       289}, {  86} }, // DIV   
    { {       280}, {  87} }, // EQ    
    { {       281}, {  88} }, // NE    
    { {       282}, {  89} }, // LT    
    { {       283}, {  90} }, // GT    
    { {       284}, {  91} }, // LE    
    { {       285}, {  92} }, // GE    
    { {         0}, {   0} },          
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {  12} },             
    { {       277}, { 136} }, // SEMICOLON
    { {       286}, {  83} }, // PLUS     
    { {       287}, {  84} }, // MINUS    
    { {       288}, {  85} }, // MUL      
    { {       289}, {  86} }, // DIV      
    { {       280}, {  87} }, // EQ       
    { {       281}, {  88} }, // NE       
    { {       282}, {  89} }, // LT       
    { {       283}, {  90} }, // GT       
    { {       284}, {  91} }, // LE       
    { {       285}, {  92} }, // GE       
    { {         0}, {   0} },             
};

SR__ s_131[] =
{
    { { REQ_DEF}, {   2} },        
    { {     267}, { 137} }, // ELSE
    { {       0}, { -47} },        
};

SR__ s_132[] =
{
    { { DEF_RED}, {   3} },                
    { {     319}, { 138} }, // CaseList    
    { {     320}, { 139} }, // CaseOnlyList
    { {       0}, { -53} },                
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       316}, { 140} }, // Expr    
    { {       287}, {  66} }, // MINUS   
    { {       317}, {  67} }, // Call    
    { {       302}, {  68} }, // IntNum  
    { {       305}, {  69} }, // FloatNum
    { {       301}, {  70} }, // Symbol  
    { {       291}, {  71} }, // LPAREN  
    { {       258}, {  26} }, // INTNUM  
    { {       259}, {  72} }, // FLOATNUM
    { {       257}, {  15} }, // ID      
    { {         0}, {   0} },            
};

SR__ s_134[] =
{
    { { REQ_DEF}, {  11} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {     280}, {  87} }, // EQ   
    { {     281}, {  88} }, // NE   
    { {     282}, {  89} }, // LT   
    { {     283}, {  90} }, // GT   
    { {     284}, {  91} }, // LE   
    { {     285}, {  92} }, // GE   
    { {       0}, { -74} },         
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   4} },          
    { {       315}, { 141} }, // Assign
    { {       301}, {  99} }, // Symbol
    { {       257}, {  15} }, // ID    
    { {         0}, {   0} },          
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {  22} },                
    { {       307}, { 142} }, // Stmt        
    { {       308}, {  42} }, // AssignStmt  
    { {       309}, {  43} }, // CallStmt    
    { {       310}, {  44} }, // RetStmt     
    { {       311}, {  45} }, // WhileStmt   
    { {       312}, {  46} }, // ForStmt     
    { {       313}, {  47} }, // IfStmt      
    { {       314}, {  48} }, // SwitchStmt  
    { {       303}, {  49} }, // CompoundStmt
    { {       277}, {  50} }, // SEMICOLON   
    { {       315}, {  51} }, // Assign      
    { {       317}, {  52} }, // Call        
    { {       262}, {  53} }, // RETURN      
    { {       263}, {  54} }, // WHILE       
    { {       264}, {  55} }, // DO          
    { {       265}, {  56} }, // FOR         
    { {       266}, {  57} }, // IF          
    { {       268}, {  58} }, // SWITCH      
    { {       274}, {  30} }, // LBRACE      
    { {       301}, {  59} }, // Symbol      
    { {       257}, {  15} }, // ID          
    { {         0}, {   0} },                
};

SR__ s_138[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       275}, { 143} }, // RBRACE
    { {         0}, {   0} },          
};

SR__ s_139[] =
{
    { { REQ_DEF}, {   3} },           
    { {     270}, { 144} }, // DEFAULT
    { {     269}, { 145} }, // CASE   
    { {       0}, { -50} },           
};

SR__ s_140[] =
{
    { { REQ_DEF}, {  11} },         
    { {     286}, {  83} }, // PLUS 
    { {     287}, {  84} }, // MINUS
    { {     288}, {  85} }, // MUL  
    { {     289}, {  86} }, // DIV  
    { {     280}, {  87} }, // EQ   
    { {     281}, {  88} }, // NE   
    { {     282}, {  89} }, // LT   
    { {     283}, {  90} }, // GT   
    { {     284}, {  91} }, // LE   
    { {     285}, {  92} }, // GE   
    { {       0}, { -38} },         
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       292}, { 146} }, // RPAREN
    { {         0}, {   0} },          
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       276}, { 147} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       302}, { 148} }, // IntNum
    { {       258}, {  26} }, // INTNUM
    { {         0}, {   0} },          
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {  22} },                
    { {       307}, { 149} }, // Stmt        
    { {       308}, {  42} }, // AssignStmt  
    { {       309}, {  43} }, // CallStmt    
    { {       310}, {  44} }, // RetStmt     
    { {       311}, {  45} }, // WhileStmt   
    { {       312}, {  46} }, // ForStmt     
    { {       313}, {  47} }, // IfStmt      
    { {       314}, {  48} }, // SwitchStmt  
    { {       303}, {  49} }, // CompoundStmt
    { {       277}, {  50} }, // SEMICOLON   
    { {       315}, {  51} }, // Assign      
    { {       317}, {  52} }, // Call        
    { {       262}, {  53} }, // RETURN      
    { {       263}, {  54} }, // WHILE       
    { {       264}, {  55} }, // DO          
    { {       265}, {  56} }, // FOR         
    { {       266}, {  57} }, // IF          
    { {       268}, {  58} }, // SWITCH      
    { {       274}, {  30} }, // LBRACE      
    { {       301}, {  59} }, // Symbol      
    { {       257}, {  15} }, // ID          
    { {         0}, {   0} },                
};

SR__ s_147[] =
{
    { { DEF_RED}, {   2} },            
    { {     306}, { 150} }, // StmtList
    { {       0}, { -25} },            
};

SR__ s_148[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       276}, { 151} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_150[] =
{
    { { REQ_DEF}, {  23} },                
    { {     271}, { 152} }, // BREAK       
    { {     307}, {  41} }, // Stmt        
    { {     308}, {  42} }, // AssignStmt  
    { {     309}, {  43} }, // CallStmt    
    { {     310}, {  44} }, // RetStmt     
    { {     311}, {  45} }, // WhileStmt   
    { {     312}, {  46} }, // ForStmt     
    { {     313}, {  47} }, // IfStmt      
    { {     314}, {  48} }, // SwitchStmt  
    { {     303}, {  49} }, // CompoundStmt
    { {     277}, {  50} }, // SEMICOLON   
    { {     315}, {  51} }, // Assign      
    { {     317}, {  52} }, // Call        
    { {     262}, {  53} }, // RETURN      
    { {     263}, {  54} }, // WHILE       
    { {     264}, {  55} }, // DO          
    { {     265}, {  56} }, // FOR         
    { {     266}, {  57} }, // IF          
    { {     268}, {  58} }, // SWITCH      
    { {     274}, {  30} }, // LBRACE      
    { {     301}, {  59} }, // Symbol      
    { {     257}, {  15} }, // ID          
    { {       0}, { -51} },                
};

SR__ s_151[] =
{
    { { DEF_RED}, {   2} },            
    { {     306}, { 153} }, // StmtList
    { {       0}, { -25} },            
};

SR__ s_152[] =
{
    { { REQ_TOKEN}, {   2} },             
    { {       277}, { 154} }, // SEMICOLON
    { {         0}, {   0} },             
};

SR__ s_153[] =
{
    { { REQ_DEF}, {  23} },                
    { {     271}, { 155} }, // BREAK       
    { {     307}, {  41} }, // Stmt        
    { {     308}, {  42} }, // AssignStmt  
    { {     309}, {  43} }, // CallStmt    
    { {     310}, {  44} }, // RetStmt     
    { {     311}, {  45} }, // WhileStmt   
    { {     312}, {  46} }, // ForStmt     
    { {     313}, {  47} }, // IfStmt      
    { {     314}, {  48} }, // SwitchStmt  
    { {     303}, {  49} }, // CompoundStmt
    { {     277}, {  50} }, // SEMICOLON   
    { {     315}, {  51} }, // Assign      
    { {     317}, {  52} }, // Call        
    { {     262}, {  53} }, // RETURN      
    { {     263}, {  54} }, // WHILE       
    { {     264}, {  55} }, // DO          
    { {     265}, {  56} }, // FOR         
    { {     266}, {  57} }, // IF          
    { {     268}, {  58} }, // SWITCH      
    { {     274}, {  30} }, // LBRACE      
    { {     301}, {  59} }, // Symbol      
    { {     257}, {  15} }, // ID          
    { {       0}, { -54} },                
};

SR__ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {   2} },             
    { {       277}, { 156} }, // SEMICOLON
    { {         0}, {   0} },             
};

SR__ s_156[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 18 "grammar"
        {
         Program::program = new Program(NULL, NULL);
         }
        break;

        case 2:
#line 23 "grammar"
        {
         Program::program = new Program(NULL, (List *)d_vsp__[0]);
         }
        break;

        case 3:
#line 28 "grammar"
        {
         Program::program = new Program((List *)d_vsp__[0], NULL);
         }
        break;

        case 4:
#line 33 "grammar"
        {
         Program::program = new Program((List *)d_vsp__[-1], (List *)d_vsp__[0]);
         }
        break;

        case 5:
#line 40 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0]);
         }
        break;

        case 6:
#line 45 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0], (List *)d_vsp__[-1]);
         }
        break;

        case 7:
#line 52 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0]);
         }
        break;

        case 8:
#line 57 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0], (List *)d_vsp__[-1]);
         }
        break;

        case 9:
#line 64 "grammar"
        {
         d_val__ = (void *)new Declaration((Type *)d_vsp__[-2], (List *)d_vsp__[-1]);
         }
        break;

        case 10:
#line 71 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0]);
         }
        break;

        case 11:
#line 76 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0], (List *)d_vsp__[-2]);
         }
        break;

        case 12:
#line 83 "grammar"
        {
         d_val__ = (void *)new Identifier((Symbol *)d_vsp__[0]);
         }
        break;

        case 13:
#line 88 "grammar"
        {
         d_val__ = (void *)new IndexedIdentifier((Symbol *)d_vsp__[-3], (IntNum *)d_vsp__[-1]);
         }
        break;

        case 14:
#line 95 "grammar"
        {
         d_val__ = (void *)new Function ((Type *)d_vsp__[-4], (Symbol *)d_vsp__[-3], NULL, (CompoundStmt *)d_vsp__[0]);
         }
        break;

        case 15:
#line 100 "grammar"
        {
         d_val__ = (void *)new Function ((Type *)d_vsp__[-5], (Symbol *)d_vsp__[-4], (List *)d_vsp__[-2], (CompoundStmt *)d_vsp__[0]);
         }
        break;

        case 16:
#line 107 "grammar"
        {
         d_val__ = (void *)new List((Base *)new Parameter((Type *)d_vsp__[-1], (Identifier *)d_vsp__[0]));
         }
        break;

        case 17:
#line 112 "grammar"
        {
         d_val__ = (void *)new List((Base *)new Parameter((Type *)d_vsp__[-1], (Identifier *)d_vsp__[0]), (List *)d_vsp__[-3]);
         }
        break;

        case 18:
#line 119 "grammar"
        {
         d_val__ = (void *)new Symbol(d_scanner.lineNr(), d_scanner.matched());
         }
        break;

        case 19:
#line 126 "grammar"
        {
         d_val__ = (void *)new IntNum(d_scanner.lineNr(), d_scanner.matched());
         }
        break;

        case 20:
#line 133 "grammar"
        {
         d_val__ = (void *)new FloatNum(d_scanner.lineNr(), d_scanner.matched());
         }
        break;

        case 21:
#line 140 "grammar"
        {
         d_val__ = (void *)new Type(Type::INT);
         }
        break;

        case 22:
#line 145 "grammar"
        {
         d_val__ = (void *)new Type(Type::FLOAT);
         }
        break;

        case 23:
#line 152 "grammar"
        {
         d_val__ = (void *)new CompoundStmt(NULL, (List *)d_vsp__[-1]);
         }
        break;

        case 24:
#line 157 "grammar"
        {
         d_val__ = (void *)new CompoundStmt((List *)d_vsp__[-2], (List *)d_vsp__[-1]);
         }
        break;

        case 25:
#line 164 "grammar"
        {
         d_val__ = NULL;
         }
        break;

        case 26:
#line 169 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0], (List *)d_vsp__[-1]);
         }
        break;

        case 27:
#line 176 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 28:
#line 181 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 29:
#line 186 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 30:
#line 191 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 31:
#line 196 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 32:
#line 201 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 33:
#line 206 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 34:
#line 211 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 35:
#line 216 "grammar"
        {
         d_val__ = (void *)new Stmt();
         }
        break;

        case 36:
#line 223 "grammar"
        {
         d_val__ = (void *)new AssignStmt((Assign *)d_vsp__[-1]);
         }
        break;

        case 37:
#line 230 "grammar"
        {
         d_val__ = (void *)new Assign((Symbol *)d_vsp__[-2], (Expr *)d_vsp__[0]);
         }
        break;

        case 38:
#line 235 "grammar"
        {
         d_val__ = (void *)new IndexedAssign((Symbol *)d_vsp__[-5], (Expr *)d_vsp__[-3], (Expr *)d_vsp__[0]);
         }
        break;

        case 39:
#line 242 "grammar"
        {
         d_val__ = (void *)new CallStmt((Call *)d_vsp__[-1]);
         }
        break;

        case 40:
#line 249 "grammar"
        {
         d_val__ = (void *)new Call((Symbol *)d_vsp__[-2]);
         }
        break;

        case 41:
#line 254 "grammar"
        {
         d_val__ = (void *)new Call((Symbol *)d_vsp__[-3], (List *)d_vsp__[-1]);
         }
        break;

        case 42:
#line 261 "grammar"
        {
         d_val__ = (void *)new RetStmt();
         }
        break;

        case 43:
#line 266 "grammar"
        {
         d_val__ = (void *)new RetStmt((Expr *)d_vsp__[-1]);
         }
        break;

        case 44:
#line 273 "grammar"
        {
         d_val__ = (void *)new WhileStmt((Expr *)d_vsp__[-2], (Stmt *)d_vsp__[0]);
         }
        break;

        case 45:
#line 278 "grammar"
        {
         d_val__ = (void *)new DoWhileStmt((Expr *)d_vsp__[-1], (Stmt *)d_vsp__[-4]);
         }
        break;

        case 46:
#line 285 "grammar"
        {
         d_val__ = (void *)new ForStmt((Assign *)d_vsp__[-6], (Expr *)d_vsp__[-4], (Assign *)d_vsp__[-2], (Stmt *)d_vsp__[0]);
         }
        break;

        case 47:
#line 292 "grammar"
        {
         d_val__ = (void *)new IfStmt((Expr *)d_vsp__[-2], (Stmt *)d_vsp__[0]);
         }
        break;

        case 48:
#line 297 "grammar"
        {
         d_val__ = (void *)new IfStmt((Expr *)d_vsp__[-4], (Stmt *)d_vsp__[-2], (Stmt *)d_vsp__[0]);
         }
        break;

        case 49:
#line 304 "grammar"
        {
         d_val__ = (void *)new SwitchStmt((Identifier *)d_vsp__[-4], (List *)d_vsp__[-1]);
         }
        break;

        case 50:
#line 311 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 51:
#line 316 "grammar"
        {
         d_val__ = (void *)new List((Base *)new DefaultCase((List *)d_vsp__[0], false), (List *)d_vsp__[-3]);
         }
        break;

        case 52:
#line 321 "grammar"
        {
         d_val__ = (void *)new List((Base *)new DefaultCase((List *)d_vsp__[-2], true), (List *)d_vsp__[-5]);
         }
        break;

        case 53:
#line 328 "grammar"
        {
         d_val__ = NULL;
         }
        break;

        case 54:
#line 333 "grammar"
        {
         d_val__ = (void *)new List((Base *)new Case((IntNum *)d_vsp__[-2], (List *)d_vsp__[0], false), (List *)d_vsp__[-4]);
         }
        break;

        case 55:
#line 338 "grammar"
        {
         d_val__ = (void *)new List((Base *)new Case((IntNum *)d_vsp__[-4], (List *)d_vsp__[-2], true), (List *)d_vsp__[-6]);
         }
        break;

        case 56:
#line 345 "grammar"
        {
         d_val__ = (void *)new UnOpExpr(UnOpExpr::MINUS, (Expr *)d_vsp__[0]);
         }
        break;

        case 57:
#line 350 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::PLUS, (Expr *)d_vsp__[0]);
         }
        break;

        case 58:
#line 355 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::MINUS, (Expr *)d_vsp__[0]);
         }
        break;

        case 59:
#line 360 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::MUL, (Expr *)d_vsp__[0]);
         }
        break;

        case 60:
#line 365 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::DIV, (Expr *)d_vsp__[0]);
         }
        break;

        case 61:
#line 370 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::EQ, (Expr *)d_vsp__[0]);
         }
        break;

        case 62:
#line 375 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::NE, (Expr *)d_vsp__[0]);
         }
        break;

        case 63:
#line 380 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::LT, (Expr *)d_vsp__[0]);
         }
        break;

        case 64:
#line 385 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::GT, (Expr *)d_vsp__[0]);
         }
        break;

        case 65:
#line 390 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::LE, (Expr *)d_vsp__[0]);
         }
        break;

        case 66:
#line 395 "grammar"
        {
         d_val__ = (void *)new BinOpExpr((Expr *)d_vsp__[-2], BinOpExpr::GE, (Expr *)d_vsp__[0]);
         }
        break;

        case 67:
#line 400 "grammar"
        {
         d_val__ = d_vsp__[0];
         }
        break;

        case 68:
#line 405 "grammar"
        {
         d_val__ = (void *)new IntNumExpr((IntNum *)d_vsp__[0]);
         }
        break;

        case 69:
#line 410 "grammar"
        {
         d_val__ = (void *)new FloatNumExpr((FloatNum *)d_vsp__[0]);
         }
        break;

        case 70:
#line 415 "grammar"
        {
         d_val__ = (void *)new SymbolExpr((Symbol *)d_vsp__[0]);
         }
        break;

        case 71:
#line 420 "grammar"
        {
         d_val__ = (void *)new IndexedSymbolExpr((Symbol *)d_vsp__[-3], (Expr *)d_vsp__[-1]);
         }
        break;

        case 72:
#line 425 "grammar"
        {
         d_val__ = d_vsp__[-1];
         }
        break;

        case 73:
#line 432 "grammar"
        {
         d_val__ = (void *)new List((Base *)d_vsp__[0]);
         }
        break;

        case 74:
#line 437 "grammar"
        {
         d_val__ = (void *)new List((Expr *)d_vsp__[0], (List *)d_vsp__[-2]);
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}




